// Code generated by protoc-gen-go.
// source: bazil.org/bazil/server/control/wire/sharing.proto
// DO NOT EDIT!

package wire

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SharingKeyAddRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Must be exactly 32 bytes long.
	Secret []byte `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (m *SharingKeyAddRequest) Reset()                    { *m = SharingKeyAddRequest{} }
func (m *SharingKeyAddRequest) String() string            { return proto.CompactTextString(m) }
func (*SharingKeyAddRequest) ProtoMessage()               {}
func (*SharingKeyAddRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type SharingKeyAddResponse struct {
}

func (m *SharingKeyAddResponse) Reset()                    { *m = SharingKeyAddResponse{} }
func (m *SharingKeyAddResponse) String() string            { return proto.CompactTextString(m) }
func (*SharingKeyAddResponse) ProtoMessage()               {}
func (*SharingKeyAddResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func init() {
	proto.RegisterType((*SharingKeyAddRequest)(nil), "bazil.control.SharingKeyAddRequest")
	proto.RegisterType((*SharingKeyAddResponse)(nil), "bazil.control.SharingKeyAddResponse")
}

var fileDescriptor3 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x32, 0x4c, 0x4a, 0xac, 0xca,
	0xcc, 0xd1, 0xcb, 0x2f, 0x4a, 0xd7, 0x07, 0xb3, 0xf4, 0x8b, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0xf4,
	0x93, 0xf3, 0xf3, 0x4a, 0x8a, 0xf2, 0x73, 0xf4, 0xcb, 0x33, 0x8b, 0x52, 0xf5, 0x8b, 0x33, 0x12,
	0x8b, 0x32, 0xf3, 0xd2, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x78, 0x21, 0x5a, 0xa0, 0x2a,
	0x94, 0x4c, 0xb8, 0x44, 0x82, 0x21, 0xf2, 0xde, 0xa9, 0x95, 0x8e, 0x29, 0x29, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x3c, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x42, 0x7c, 0x5c, 0x6c, 0xc5, 0xa9, 0xc9, 0x45, 0xa9, 0x25, 0x12, 0x4c, 0x40, 0x3e,
	0x8f, 0x92, 0x38, 0x97, 0x28, 0x9a, 0xae, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x27, 0xb6, 0x28,
	0x16, 0x90, 0x9d, 0x49, 0x6c, 0x60, 0xcb, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x9a,
	0xa0, 0xb4, 0xa1, 0x00, 0x00, 0x00,
}
